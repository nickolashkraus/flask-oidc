# Demo the OpenID Connect authorization code flow using an OIDC token requested
# from GitHub's OIDC Provider.
name: Demo

on:
  # Allow workflow to be manually triggered.
  workflow_dispatch:

# The job or workflow run requires a permissions setting with id-token: write.
# You won't be able to request the OIDC JWT ID token if the permissions setting
# for id-token is set to read or none.
permissions:
  id-token: write # This is required for requesting the JWT.
  contents: read  # This is required for actions/checkout.

jobs:
  test:
    # To specify a self-hosted runner for your job, configure runs-on in your
    # workflow file with self-hosted runner labels. All self-hosted runners
    # have the self-hosted label.
    runs-on: self-hosted
    steps:
      # NOTE: You should use the checkout action any time your workflow will
      # run against the repository's code.
      # See: https://github.com/marketplace/actions/checkout
      - uses: actions/checkout@v3
      # See: https://github.com/marketplace/actions/setup-python
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
      # Example action
      # - use: actions/gha-store-artifacts@1
      #   with:
      #     artifact: /path/to/artifact
      - name: "Demo"
        run: |
          # 0. Generate build artifact.
          echo "Hello, World!" > "demo.txt"
          # 1. Request an OIDC token.
          OIDC_TOKEN=$(curl -sSL "${ACTIONS_ID_TOKEN_REQUEST_URL}" \
            -H "Accept: application/json; api-version=2.0" \
            -H "Authorization: Bearer ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}" \
            -H "Content-Type: application/json" \
            -H "User-Agent: actions/oidc-client" \
            --data "{}" | jq -r ".value")
          # 2. Make a POST request to the endpoint.
          FLASK_ENDPOINT='flask-oidc.default.svc.cluster.local:5000'
          RESPONSE=$(curl -X POST -sSL "${FLASK_ENDPOINT}/v1/presigned" \
            -H "Authorization: Bearer ${OIDC_TOKEN}" \
            -H "Content-Type: application/json" \
            --data '{"bucket": "flask-oidc", "key": "demo.txt"}')
          # 3. Upload the object to S3.
          URL=$(echo "${RESPONSE}" | jq '.url' | tr -d '\"')
          AWSACCESSKEYID=$(echo "${RESPONSE}" | jq '.fields.AWSAccessKeyId' | tr -d '\"')
          KEY=$(echo "${RESPONSE}" | jq '.fields.key' | tr -d '\"')
          POLICY=$(echo "${RESPONSE}" | jq '.fields.policy' | tr -d '\"')
          SIGNATURE=$(echo "${RESPONSE}" | jq '.fields.signature' | tr -d '\"')
          # NOTE: Bucket POST must be of the enclosure-type
          # multipart/form-data.
          curl -X POST "${URL}" \
            -H "Content-Type: multipart/form-data" \
            -F "AWSAccessKeyId=${AWSACCESSKEYID}" \
            -F "key=${KEY}" \
            -F "policy=${POLICY}" \
            -F "signature=${SIGNATURE}" \
            -F file=@demo.txt
